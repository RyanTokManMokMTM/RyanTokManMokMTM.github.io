<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Backend on Jackson.tmm</title><link>https://ryantokmanmokmtm.github.io/tags/backend/</link><description>Recent content in Backend on Jackson.tmm</description><generator>Hugo</generator><language>zh-tw</language><lastBuildDate>Wed, 30 Mar 2022 16:05:57 +0800</lastBuildDate><atom:link href="https://ryantokmanmokmtm.github.io/tags/backend/rss.xml" rel="self" type="application/rss+xml"/><item><title>[Note]Simple RateLimiter Example Based on IP</title><link>https://ryantokmanmokmtm.github.io/archives/note/simple-ratelimiter-example-based-on-ip/</link><pubDate>Wed, 30 Mar 2022 16:05:57 +0800</pubDate><guid>https://ryantokmanmokmtm.github.io/archives/note/simple-ratelimiter-example-based-on-ip/</guid><description>&lt;h3 id="基於gin實作rate-limiter">基於Gin實作Rate Limiter
&lt;a class="header-anchor" href="#%e5%9f%ba%e6%96%bcgin%e5%af%a6%e4%bd%9crate-limiter">&lt;/a>
&lt;/h3>&lt;p>假設我們有2個APIs,而每個API都需要消耗1個&lt;code>Tokens&lt;/code>&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>uri&lt;/th>
 &lt;th>method&lt;/th>
 &lt;th>desc&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>/api/posts/{id}&lt;/td>
 &lt;td>GET&lt;/td>
 &lt;td>return a simple demo message&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>/ping&lt;/td>
 &lt;td>GET&lt;/td>
 &lt;td>return pong&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>我們先設置一下rate limiter桶子的容量只能放下一個tokens,而tokens則會每秒生產5個。存取API時,若沒有Token可以用，就需要等待token下一次生產並放到桶子裡，才能繼續進行下去。&lt;/strong>&lt;/p></description></item><item><title>[Note]Token Bucket algorithm introduction and play with golang rate Limiter</title><link>https://ryantokmanmokmtm.github.io/archives/note/token-bucket-intro/</link><pubDate>Tue, 29 Mar 2022 18:33:07 +0800</pubDate><guid>https://ryantokmanmokmtm.github.io/archives/note/token-bucket-intro/</guid><description>&lt;h2 id="token-bucket令牌桶算法">Token Bucket(令牌桶算法)
&lt;a class="header-anchor" href="#token-bucket%e4%bb%a4%e7%89%8c%e6%a1%b6%e7%ae%97%e6%b3%95">&lt;/a>
&lt;/h2>&lt;h4 id="什麼是token-bucket-呢">什麼是Token Bucket 呢?
&lt;a class="header-anchor" href="#%e4%bb%80%e9%ba%bc%e6%98%aftoken-bucket-%e5%91%a2">&lt;/a>
&lt;/h4>
 &lt;blockquote>
 &lt;p>簡單來說就是運用Token Bucket的系統會以一個設定的速率往桶子(Bucket)裡面丟令牌(Token)。如果請求(Request)需要被處理時，就必需得Bucket裡的Token。當桶子裡面的沒有Token可以分配/獲取時，也就是說Bucket現在是空的(Token已經被其他令牌拿完了)，系統則會拒絕這個請求的服務。&lt;/p></description></item><item><title>[Note]What Is JWT(Json Web Token)-EN</title><link>https://ryantokmanmokmtm.github.io/archives/note/jwt-note/</link><pubDate>Thu, 24 Mar 2022 13:52:49 +0800</pubDate><guid>https://ryantokmanmokmtm.github.io/archives/note/jwt-note/</guid><description>&lt;h2 id="what-is-jwtjson-web-token">What is JWT(Json Web Token)?
&lt;a class="header-anchor" href="#what-is-jwtjson-web-token">&lt;/a>
&lt;/h2>&lt;p>The full name of JWT is Json Web Token. Acccording to the definition, JWT is a proposed Internet standard for creating data with optinal signature and/or opntional encryption whose payload holds JSON that asserts some number of clamis.&lt;br>
It&amp;rsquo;s used for &lt;em>identity authentication&lt;/em> between client and the server that allows accessing resources in the server.&lt;/p>
&lt;h2 id="the-structure-of-jwt">The Structure of JWT
&lt;a class="header-anchor" href="#the-structure-of-jwt">&lt;/a>
&lt;/h2>&lt;p>JWT consists of three parts including:&lt;/p></description></item></channel></rss>