<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Data Structure on Jackson.tmm</title><link>http://localhost:1313/tags/data-structure/</link><description>Recent content in Data Structure on Jackson.tmm</description><generator>Hugo</generator><language>zh-TW</language><lastBuildDate>Mon, 28 Oct 2024 12:23:11 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/data-structure/rss.xml" rel="self" type="application/rss+xml"/><item><title>[筆記] B+ Tree</title><link>http://localhost:1313/post/note/b+_tree/</link><pubDate>Mon, 28 Oct 2024 12:23:11 +0800</pubDate><guid>http://localhost:1313/post/note/b+_tree/</guid><description>&lt;h3 id="什麼是b-樹">什麼是B+ 樹
&lt;a class="header-anchor" href="#%e4%bb%80%e9%ba%bc%e6%98%afb-%e6%a8%b9">&lt;/a>
&lt;/h3>&lt;p>我們先看看B+ tree的定義，再來看看他長什麼樣子：&lt;br>
**定義: **
B+ 樹是一種平衡樹(Balance Tree)，而B+ 樹可以包含二個或以上的子節點，所以是N元平衡樹。 B+ 樹的特點如下：&lt;/p>
&lt;ol>
&lt;li>子節點且非葉子節點中包含n個key，其n個key對應一棵n元樹&lt;/li>
&lt;li>葉子節點包含了key的全部的數據，數據只有在葉子節點中命中&lt;/li>
&lt;li>子節點包含了其子樹節點的最小/最大的key&lt;/li>
&lt;li>對於一棵m元的B+樹，每個子節點最多為m-1個key，也就是最多保存m-1筆紀錄。&lt;/li>
&lt;li>相連葉子節點通過pointer連結&lt;/li>
&lt;li>節點的元素key的左子樹都是小於這個key，右子樹都是大於或者等於它。&lt;/li>
&lt;li>子節點/葉子階段都是有序的&lt;/li>
&lt;/ol>
&lt;h3 id="b-樹操作">B+ 樹操作
&lt;a class="header-anchor" href="#b-%e6%a8%b9%e6%93%8d%e4%bd%9c">&lt;/a>
&lt;/h3>&lt;p>我們知道了B+ 樹有序的了，現在對它進行操作：&lt;/p>
&lt;ol>
&lt;li>查詢&lt;/li>
&lt;li>根據Key來對B+ tree進行Binary Search來查找。不論找到或者找不到，都會從Root到葉子走出一條路徑。&lt;/li>
&lt;li>從Root開始隨機查詢。&lt;/li>
&lt;li>插入
這裡會有不同的情況:&lt;/li>
&lt;li>移除&lt;/li>
&lt;/ol>
&lt;h3 id="參考">參考
&lt;a class="header-anchor" href="#%e5%8f%83%e8%80%83">&lt;/a>
&lt;/h3></description></item><item><title>[筆記]TrieTree(前綴樹/字典樹)</title><link>http://localhost:1313/post/note/trietree/</link><pubDate>Tue, 21 Jun 2022 11:19:28 +0800</pubDate><guid>http://localhost:1313/post/note/trietree/</guid><description>&lt;h1 id="introduction">Introduction
&lt;a class="header-anchor" href="#introduction">&lt;/a>
&lt;/h1>&lt;h2 id="什麼是trietree">什麼是TrieTree?
&lt;a class="header-anchor" href="#%e4%bb%80%e9%ba%bc%e6%98%aftrietree">&lt;/a>
&lt;/h2>&lt;blockquote>
&lt;p>Trie稱為前綴樹或字典樹,是有序樹的一種,Node的key通常為String類型。Trie Tree與Binary-Searching Tree不同的點是,Trie Tree的Key並不會直接保存在Node中,而是它在Tree中的位置所決定的。一個Node中的所有的childrens都有相同的Prefix(前綴)。假設有個Node的key 為&lt;code>T&lt;/code>,它的children將會是&lt;code>Time&lt;/code>, &lt;code>Tim&lt;/code>, &lt;code>Test&lt;/code>等,因為他們都會相同的Prefix(前綴)&lt;code>T&lt;/code>。&lt;/p></description></item></channel></rss>