<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design-Pattern on Jackson.tmm</title><link>https://ryantokmanmokmtm.github.io/categories/design-pattern/</link><description>Recent content in Design-Pattern on Jackson.tmm</description><generator>Hugo</generator><language>zh-tw</language><lastBuildDate>Sat, 09 Apr 2022 11:19:39 +0800</lastBuildDate><atom:link href="https://ryantokmanmokmtm.github.io/categories/design-pattern/rss.xml" rel="self" type="application/rss+xml"/><item><title>[Note]Creational Singleton Pattern</title><link>https://ryantokmanmokmtm.github.io/post/design-pattern/creational-singleton-pattern/</link><pubDate>Sat, 09 Apr 2022 11:19:39 +0800</pubDate><guid>https://ryantokmanmokmtm.github.io/post/design-pattern/creational-singleton-pattern/</guid><description>&lt;h2 id="什麼是singleton-pattern單例模式呢">什麼是Singleton Pattern(單例模式)呢?
&lt;a class="header-anchor" href="#%e4%bb%80%e9%ba%bc%e6%98%afsingleton-pattern%e5%96%ae%e4%be%8b%e6%a8%a1%e5%bc%8f%e5%91%a2">&lt;/a>
&lt;/h2>
 &lt;blockquote>
 &lt;p>定義:一個Class在系統中只會存在一個實例(instance),整個系統中只提供1個可使用的instance,以確保唯一性,並節省系統資源。&lt;/p></description></item><item><title>[Note]Creational Abstract Factory</title><link>https://ryantokmanmokmtm.github.io/post/design-pattern/creational-abstract-factory/</link><pubDate>Sun, 03 Apr 2022 19:38:20 +0800</pubDate><guid>https://ryantokmanmokmtm.github.io/post/design-pattern/creational-abstract-factory/</guid><description>&lt;h2 id="什麼是abstract-factory抽象工廠呢">什麼是Abstract Factory(抽象工廠)呢?
&lt;a class="header-anchor" href="#%e4%bb%80%e9%ba%bc%e6%98%afabstract-factory%e6%8a%bd%e8%b1%a1%e5%b7%a5%e5%bb%a0%e5%91%a2">&lt;/a>
&lt;/h2>
 &lt;blockquote>
 &lt;p>定義: 又稱為Kit模式。提供一個創建系列相關或者互相依賴的Interface，而無需指定其具體的class&lt;/p>
 &lt;/blockquote>
&lt;h3 id="簡單例子">簡單例子
&lt;a class="header-anchor" href="#%e7%b0%a1%e5%96%ae%e4%be%8b%e5%ad%90">&lt;/a>
&lt;/h3>&lt;p>&lt;em>注: 以下程式單純用於解釋，並不能實際執行&lt;/em>&lt;/p></description></item><item><title>[Note]Creational-Factory</title><link>https://ryantokmanmokmtm.github.io/post/design-pattern/creational-factory/</link><pubDate>Sun, 27 Mar 2022 16:55:17 +0800</pubDate><guid>https://ryantokmanmokmtm.github.io/post/design-pattern/creational-factory/</guid><description>&lt;h2 id="什麼是factory工廠呢">什麼是Factory(工廠)呢?
&lt;a class="header-anchor" href="#%e4%bb%80%e9%ba%bc%e6%98%affactory%e5%b7%a5%e5%bb%a0%e5%91%a2">&lt;/a>
&lt;/h2>
 &lt;blockquote>
 &lt;p>定義:建立一個接口,讓子類自己決定實現哪一個Factory,其&lt;strong>重點是繼承了Simple Factory Patterns的優點,同時解決了它的問題&lt;/strong>&lt;/p></description></item><item><title>[Note]Creational-Simple Factory</title><link>https://ryantokmanmokmtm.github.io/post/design-pattern/creational-simple-factory/</link><pubDate>Sun, 27 Mar 2022 16:42:45 +0800</pubDate><guid>https://ryantokmanmokmtm.github.io/post/design-pattern/creational-simple-factory/</guid><description>&lt;h2 id="什麼是simple-factory簡單工廠呢">什麼是Simple Factory(簡單工廠)呢?
&lt;a class="header-anchor" href="#%e4%bb%80%e9%ba%bc%e6%98%afsimple-factory%e7%b0%a1%e5%96%ae%e5%b7%a5%e5%bb%a0%e5%91%a2">&lt;/a>
&lt;/h2>
 &lt;blockquote>
 &lt;p>簡單而言就是: 由一個工廠來生產全部產品
定義:建立一個接口,讓子類自己決定實現哪一個Factory,重點在於工廠，透過工廠的Static method 進行生成的Object&lt;/p></description></item><item><title>[Note]Design Pattern Princeple</title><link>https://ryantokmanmokmtm.github.io/post/design-pattern/design-pattern-princeple/</link><pubDate>Sun, 27 Mar 2022 16:18:55 +0800</pubDate><guid>https://ryantokmanmokmtm.github.io/post/design-pattern/design-pattern-princeple/</guid><description>&lt;h2 id="什麼是design-pattern設計模式呢">什麼是Design Pattern(設計模式)呢?
&lt;a class="header-anchor" href="#%e4%bb%80%e9%ba%bc%e6%98%afdesign-pattern%e8%a8%ad%e8%a8%88%e6%a8%a1%e5%bc%8f%e5%91%a2">&lt;/a>
&lt;/h2>
 &lt;blockquote>
 &lt;p>設計模式(Design Pattern) 是對軟體設計中普遍存在（反覆出現）的各種問題，所提出的解決方案。用於描述在各種不同的情況下，&lt;strong>如何解決問題的一種方案&lt;/strong>&lt;/p></description></item></channel></rss>