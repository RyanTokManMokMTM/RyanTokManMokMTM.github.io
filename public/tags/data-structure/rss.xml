<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Data Structure on Hugo NexT</title><link>//localhost:1414/tags/data-structure/</link><description>Recent content in Data Structure on Hugo NexT</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sat, 23 Nov 2024 15:28:20 +0800</lastBuildDate><atom:link href="//localhost:1414/tags/data-structure/rss.xml" rel="self" type="application/rss+xml"/><item><title>[筆記] 平衡樹 Balance Tree</title><link>//localhost:1414/post/note/balance-tree/</link><pubDate>Thu, 31 Oct 2024 15:28:20 +0800</pubDate><guid>//localhost:1414/post/note/balance-tree/</guid><description>&lt;h2 id="簡介">簡介
&lt;a class="header-anchor" href="#%e7%b0%a1%e4%bb%8b">&lt;/a>
&lt;/h2>&lt;p>在講述Balance Tree之前，我們先來看一種情況。現在我們根據數據來建立一棵Binary Search Tree，譬如說以下的數據 : [4,5,6,7,8,9,10], 我們就會建立出以下這顆 Binary Search Tree:&lt;br>
&lt;img src="//localhost:1414/imgs/img-lazy-loading.gif" data-src="//localhost:1414/imgs/helper/balance-tree/unblanceTree.png" alt="unbalance-tree" />&lt;/p></description></item><item><title>[筆記]TrieTree(前綴樹/字典樹)</title><link>//localhost:1414/post/note/trietree/</link><pubDate>Tue, 21 Jun 2022 11:19:28 +0800</pubDate><guid>//localhost:1414/post/note/trietree/</guid><description>&lt;h1 id="introduction">Introduction
&lt;a class="header-anchor" href="#introduction">&lt;/a>
&lt;/h1>&lt;h2 id="什麼是trietree">什麼是TrieTree?
&lt;a class="header-anchor" href="#%e4%bb%80%e9%ba%bc%e6%98%aftrietree">&lt;/a>
&lt;/h2>
 &lt;blockquote>
 &lt;p>Trie稱為前綴樹或字典樹,是有序樹的一種,Node的key通常為String類型。Trie Tree與Binary-Searching Tree不同的點是,Trie Tree的Key並不會直接保存在Node中,而是它在Tree中的位置所決定的。一個Node中的所有的childrens都有相同的Prefix(前綴)。假設有個Node的key 為&lt;code>T&lt;/code>,它的children將會是&lt;code>Time&lt;/code>, &lt;code>Tim&lt;/code>, &lt;code>Test&lt;/code>等,因為他們都會相同的Prefix(前綴)&lt;code>T&lt;/code>。&lt;/p></description></item></channel></rss>