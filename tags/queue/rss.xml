<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Queue on Jackson.tmm</title><link>https://ryantokmanmokmtm.github.io/tags/queue/</link><description>Recent content in Queue on Jackson.tmm</description><generator>Hugo</generator><language>zh-tw</language><lastBuildDate>Thu, 05 May 2022 09:39:35 +0800</lastBuildDate><atom:link href="https://ryantokmanmokmtm.github.io/tags/queue/rss.xml" rel="self" type="application/rss+xml"/><item><title>[Leetcode] Implement Stack using Queues(Easy)</title><link>https://ryantokmanmokmtm.github.io/archives/leetcodes/leetcode225/</link><pubDate>Thu, 05 May 2022 09:39:35 +0800</pubDate><guid>https://ryantokmanmokmtm.github.io/archives/leetcodes/leetcode225/</guid><description>&lt;h2 id="leetcode-225---implement-stack-using-queues">LeetCode 225 - Implement Stack using Queues
&lt;a class="header-anchor" href="#leetcode-225---implement-stack-using-queues">&lt;/a>
&lt;/h2>&lt;p>Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (&lt;code>push&lt;/code>, &lt;code>top&lt;/code>, &lt;code>pop&lt;/code>, and &lt;code>empty&lt;/code>).&lt;/p>
&lt;p>Implement the &lt;code>MyStack&lt;/code> class:&lt;/p>
&lt;ul>
&lt;li>void &lt;code>push(int x)&lt;/code> Pushes element x to the top of the stack.&lt;/li>
&lt;li>int &lt;code>pop()&lt;/code> Removes the element on the top of the stack and returns it.&lt;/li>
&lt;li>int &lt;code>top()&lt;/code> Returns the element on the top of the stack.&lt;/li>
&lt;li>boolean &lt;code>empty()&lt;/code> Returns &lt;code>true&lt;/code> if the stack is empty, &lt;code>false&lt;/code> otherwise.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Notes&lt;/strong>:&lt;/p></description></item><item><title>[Leetcode] Implement Stack using Queues(Easy)</title><link>https://ryantokmanmokmtm.github.io/leetcodes/leetcode225/</link><pubDate>Thu, 05 May 2022 09:39:35 +0800</pubDate><guid>https://ryantokmanmokmtm.github.io/leetcodes/leetcode225/</guid><description>&lt;h2 id="leetcode-225---implement-stack-using-queues">LeetCode 225 - Implement Stack using Queues
&lt;a class="header-anchor" href="#leetcode-225---implement-stack-using-queues">&lt;/a>
&lt;/h2>&lt;p>Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (&lt;code>push&lt;/code>, &lt;code>top&lt;/code>, &lt;code>pop&lt;/code>, and &lt;code>empty&lt;/code>).&lt;/p>
&lt;p>Implement the &lt;code>MyStack&lt;/code> class:&lt;/p>
&lt;ul>
&lt;li>void &lt;code>push(int x)&lt;/code> Pushes element x to the top of the stack.&lt;/li>
&lt;li>int &lt;code>pop()&lt;/code> Removes the element on the top of the stack and returns it.&lt;/li>
&lt;li>int &lt;code>top()&lt;/code> Returns the element on the top of the stack.&lt;/li>
&lt;li>boolean &lt;code>empty()&lt;/code> Returns &lt;code>true&lt;/code> if the stack is empty, &lt;code>false&lt;/code> otherwise.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Notes&lt;/strong>:&lt;/p></description></item></channel></rss>