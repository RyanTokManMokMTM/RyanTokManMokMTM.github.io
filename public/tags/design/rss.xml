<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design on Jackson.tmm</title><link>http://localhost:1313/tags/design/</link><description>Recent content in Design on Jackson.tmm</description><generator>Hugo</generator><language>zh-TW</language><lastBuildDate>Fri, 17 Jun 2022 23:28:22 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/design/rss.xml" rel="self" type="application/rss+xml"/><item><title>[雕刻日常]數位雕刻基礎-人頭骨雕刻目前最好的一次!</title><link>http://localhost:1313/post/share/sculpturetrain1/</link><pubDate>Fri, 17 Jun 2022 23:28:22 +0800</pubDate><guid>http://localhost:1313/post/share/sculpturetrain1/</guid><description>&lt;h2 id="直接上圖">直接上圖!
&lt;a class="header-anchor" href="#%e7%9b%b4%e6%8e%a5%e4%b8%8a%e5%9c%96">&lt;/a>
&lt;/h2>&lt;p>&lt;img src="http://localhost:1313/imgs/img-lazy-loading.gif" data-src="http://localhost:1313/imgs/design/head-train.jpg" alt="head" />&lt;/p></description></item><item><title>[Leetcode] Flatten Nested List Iterator(Medium)</title><link>http://localhost:1313/leetcodes/leetcode341/</link><pubDate>Sun, 08 May 2022 06:30:23 +0800</pubDate><guid>http://localhost:1313/leetcodes/leetcode341/</guid><description>&lt;h2 id="leetcode-341---flatten-nested-list-iterator">LeetCode 341 - Flatten Nested List Iterator
&lt;a class="header-anchor" href="#leetcode-341---flatten-nested-list-iterator">&lt;/a>
&lt;/h2>&lt;p>You are given a nested list of integers &lt;code>nestedList&lt;/code>. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.&lt;/p>
&lt;p>Implement the NestedIterator &lt;code>class&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>NestedIterator(List&amp;lt;NestedInteger&amp;gt; nestedList)&lt;/code> Initializes the iterator with the nested list &lt;code>nestedList&lt;/code>.&lt;/li>
&lt;li>&lt;code>int next()&lt;/code> Returns the next integer in the nested list.&lt;/li>
&lt;li>&lt;code>boolean hasNext()&lt;/code> Returns &lt;code>true&lt;/code> if there are still some integers in the nested list and false otherwise.&lt;/li>
&lt;/ul>
&lt;p>Your code will be tested with the following pseudocode:&lt;/p></description></item><item><title>[Leetcode] Implement Stack using Queues(Easy)</title><link>http://localhost:1313/leetcodes/leetcode225/</link><pubDate>Thu, 05 May 2022 09:39:35 +0800</pubDate><guid>http://localhost:1313/leetcodes/leetcode225/</guid><description>&lt;h2 id="leetcode-225---implement-stack-using-queues">LeetCode 225 - Implement Stack using Queues
&lt;a class="header-anchor" href="#leetcode-225---implement-stack-using-queues">&lt;/a>
&lt;/h2>&lt;p>Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (&lt;code>push&lt;/code>, &lt;code>top&lt;/code>, &lt;code>pop&lt;/code>, and &lt;code>empty&lt;/code>).&lt;/p>
&lt;p>Implement the &lt;code>MyStack&lt;/code> class:&lt;/p>
&lt;ul>
&lt;li>void &lt;code>push(int x)&lt;/code> Pushes element x to the top of the stack.&lt;/li>
&lt;li>int &lt;code>pop()&lt;/code> Removes the element on the top of the stack and returns it.&lt;/li>
&lt;li>int &lt;code>top()&lt;/code> Returns the element on the top of the stack.&lt;/li>
&lt;li>boolean &lt;code>empty()&lt;/code> Returns &lt;code>true&lt;/code> if the stack is empty, &lt;code>false&lt;/code> otherwise.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Notes&lt;/strong>:&lt;/p></description></item></channel></rss>