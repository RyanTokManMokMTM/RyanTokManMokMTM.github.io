<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Note on Jackson.tmm</title><link>http://localhost:1313/categories/note/</link><description>Recent content in Note on Jackson.tmm</description><generator>Hugo</generator><language>zh-TW</language><lastBuildDate>Mon, 28 Oct 2024 12:23:35 +0800</lastBuildDate><atom:link href="http://localhost:1313/categories/note/rss.xml" rel="self" type="application/rss+xml"/><item><title>[筆記] Mysql 事務</title><link>http://localhost:1313/post/note/mysql_transcation/</link><pubDate>Mon, 28 Oct 2024 12:23:35 +0800</pubDate><guid>http://localhost:1313/post/note/mysql_transcation/</guid><description>&lt;h3 id="什麼是事務">什麼是事務
&lt;a class="header-anchor" href="#%e4%bb%80%e9%ba%bc%e6%98%af%e4%ba%8b%e5%8b%99">&lt;/a>
&lt;/h3>&lt;h3 id="鎖和mvcc">鎖和MVCC
&lt;a class="header-anchor" href="#%e9%8e%96%e5%92%8cmvcc">&lt;/a>
&lt;/h3></description></item><item><title>[筆記]MySQL 索引</title><link>http://localhost:1313/post/note/mysql_index/</link><pubDate>Mon, 28 Oct 2024 12:23:28 +0800</pubDate><guid>http://localhost:1313/post/note/mysql_index/</guid><description>&lt;h3 id="什麼是索引">什麼是索引
&lt;a class="header-anchor" href="#%e4%bb%80%e9%ba%bc%e6%98%af%e7%b4%a2%e5%bc%95">&lt;/a>
&lt;/h3>&lt;h3 id="mysql中如何使用索引">MySQL中如何使用索引
&lt;a class="header-anchor" href="#mysql%e4%b8%ad%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8%e7%b4%a2%e5%bc%95">&lt;/a>
&lt;/h3>&lt;h3 id="索引如何在查詢中快速搜尋">索引如何在查詢中快速搜尋
&lt;a class="header-anchor" href="#%e7%b4%a2%e5%bc%95%e5%a6%82%e4%bd%95%e5%9c%a8%e6%9f%a5%e8%a9%a2%e4%b8%ad%e5%bf%ab%e9%80%9f%e6%90%9c%e5%b0%8b">&lt;/a>
&lt;/h3></description></item><item><title>[筆記] B+ Tree</title><link>http://localhost:1313/post/note/b+_tree/</link><pubDate>Mon, 28 Oct 2024 12:23:11 +0800</pubDate><guid>http://localhost:1313/post/note/b+_tree/</guid><description>&lt;h3 id="什麼是b-樹">什麼是B+ 樹
&lt;a class="header-anchor" href="#%e4%bb%80%e9%ba%bc%e6%98%afb-%e6%a8%b9">&lt;/a>
&lt;/h3>&lt;p>我們先看看B+ tree的定義，再來看看他長什麼樣子：&lt;br>
**定義: **
B+ 樹是一種平衡樹(Balance Tree)，而B+ 樹可以包含二個或以上的子節點，所以是N元平衡樹。 B+ 樹的特點如下：&lt;/p>
&lt;ol>
&lt;li>子節點且非葉子節點中包含n個key，其n個key對應一棵n元樹&lt;/li>
&lt;li>葉子節點包含了key的全部的數據，數據只有在葉子節點中命中&lt;/li>
&lt;li>子節點包含了其子樹節點的最小/最大的key&lt;/li>
&lt;li>對於一棵m元的B+樹，每個子節點最多為m-1個key，也就是最多保存m-1筆紀錄。&lt;/li>
&lt;li>相連葉子節點通過pointer連結&lt;/li>
&lt;li>節點的元素key的左子樹都是小於這個key，右子樹都是大於或者等於它。&lt;/li>
&lt;li>子節點/葉子階段都是有序的&lt;/li>
&lt;/ol>
&lt;h3 id="b-樹操作">B+ 樹操作
&lt;a class="header-anchor" href="#b-%e6%a8%b9%e6%93%8d%e4%bd%9c">&lt;/a>
&lt;/h3>&lt;p>我們知道了B+ 樹有序的了，現在對它進行操作：&lt;/p>
&lt;ol>
&lt;li>查詢&lt;/li>
&lt;li>根據Key來對B+ tree進行Binary Search來查找。不論找到或者找不到，都會從Root到葉子走出一條路徑。&lt;/li>
&lt;li>從Root開始隨機查詢。&lt;/li>
&lt;li>插入
這裡會有不同的情況:&lt;/li>
&lt;li>移除&lt;/li>
&lt;/ol>
&lt;h3 id="參考">參考
&lt;a class="header-anchor" href="#%e5%8f%83%e8%80%83">&lt;/a>
&lt;/h3></description></item><item><title>[筆記] Linked List 資料結構</title><link>http://localhost:1313/post/note/note-linkedlist/</link><pubDate>Fri, 10 Mar 2023 14:42:22 +0800</pubDate><guid>http://localhost:1313/post/note/note-linkedlist/</guid><description>&lt;p>Linked List是一個很常用的資料結構，&lt;/p>
&lt;h2 id="設計linked-list">設計Linked List
&lt;a class="header-anchor" href="#%e8%a8%ad%e8%a8%88linked-list">&lt;/a>
&lt;/h2></description></item><item><title>[筆記] Binary Search 演算法</title><link>http://localhost:1313/post/note/note-binarysearch/</link><pubDate>Thu, 09 Mar 2023 13:48:46 +0800</pubDate><guid>http://localhost:1313/post/note/note-binarysearch/</guid><description>&lt;p>Binary Search 演算法是用於在一個有序array中搜尋一個值的演算法 - TC:O(log n)。相較於Linear Search(線性搜尋) - TC:O(n),其效率大大提高。&lt;/p></description></item><item><title>[筆記] KMP - Knuth-Morris-Pratt 演算法</title><link>http://localhost:1313/post/note/note-kmp/</link><pubDate>Mon, 06 Mar 2023 12:32:40 +0800</pubDate><guid>http://localhost:1313/post/note/note-kmp/</guid><description>&lt;p>KMP(Knuth-Morris-Pratt) 算法是一個用於字符串匹配的一個算法，但確實有點抽象和複雜，因此打算寫一篇筆記來紀錄一下這個算法！&lt;br>
給定一個&lt;code>text&lt;/code>以及&lt;code>pattern&lt;/code>字符串，透過KMP 算法可以在&lt;code>text&lt;/code>中是否存在&lt;code>pattern&lt;/code>這個字符串。&lt;/p></description></item><item><title>[筆記]TrieTree(前綴樹/字典樹)</title><link>http://localhost:1313/post/note/trietree/</link><pubDate>Tue, 21 Jun 2022 11:19:28 +0800</pubDate><guid>http://localhost:1313/post/note/trietree/</guid><description>&lt;h1 id="introduction">Introduction
&lt;a class="header-anchor" href="#introduction">&lt;/a>
&lt;/h1>&lt;h2 id="什麼是trietree">什麼是TrieTree?
&lt;a class="header-anchor" href="#%e4%bb%80%e9%ba%bc%e6%98%aftrietree">&lt;/a>
&lt;/h2>&lt;blockquote>
&lt;p>Trie稱為前綴樹或字典樹,是有序樹的一種,Node的key通常為String類型。Trie Tree與Binary-Searching Tree不同的點是,Trie Tree的Key並不會直接保存在Node中,而是它在Tree中的位置所決定的。一個Node中的所有的childrens都有相同的Prefix(前綴)。假設有個Node的key 為&lt;code>T&lt;/code>,它的children將會是&lt;code>Time&lt;/code>, &lt;code>Tim&lt;/code>, &lt;code>Test&lt;/code>等,因為他們都會相同的Prefix(前綴)&lt;code>T&lt;/code>。&lt;/p></description></item><item><title>[筆記]Palindromic String(迴文字串)</title><link>http://localhost:1313/post/note/palindromicstring/</link><pubDate>Thu, 16 Jun 2022 12:26:03 +0800</pubDate><guid>http://localhost:1313/post/note/palindromicstring/</guid><description>&lt;h1 id="introduction">Introduction
&lt;a class="header-anchor" href="#introduction">&lt;/a>
&lt;/h1>&lt;h2 id="什麼是palindromic-string-迴文字串">什麼是Palindromic String 迴文字串
&lt;a class="header-anchor" href="#%e4%bb%80%e9%ba%bc%e6%98%afpalindromic-string-%e8%bf%b4%e6%96%87%e5%ad%97%e4%b8%b2">&lt;/a>
&lt;/h2>&lt;p>所謂的Palindromic String(迴文字串) 就是以一個字元為中間，而它的左邊以及右邊的組成字元相同。&lt;br>
例子:&lt;br>
&lt;code>abcdcba&lt;/code> 以&lt;code>d&lt;/code>為中心的左跟右的字元一樣。&lt;br>
&lt;code>cdc&lt;/code>左跟右都為&lt;code>c&lt;/code>&lt;br>
&lt;code>bcdcb&lt;/code> 左跟右都為&lt;code>b&lt;/code>&lt;br>
&lt;code>abcdcba&lt;/code> 左跟右都為&lt;code>a&lt;/code>&lt;/p></description></item><item><title>[Note]Simple RateLimiter Example Based on IP</title><link>http://localhost:1313/post/note/simple-ratelimiter-example-based-on-ip/</link><pubDate>Wed, 30 Mar 2022 16:05:57 +0800</pubDate><guid>http://localhost:1313/post/note/simple-ratelimiter-example-based-on-ip/</guid><description>&lt;h3 id="基於gin實作rate-limiter">基於Gin實作Rate Limiter
&lt;a class="header-anchor" href="#%e5%9f%ba%e6%96%bcgin%e5%af%a6%e4%bd%9crate-limiter">&lt;/a>
&lt;/h3>&lt;p>假設我們有2個APIs,而每個API都需要消耗1個&lt;code>Tokens&lt;/code>&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">uri&lt;/th>
 &lt;th style="text-align: left">method&lt;/th>
 &lt;th style="text-align: left">desc&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">/api/posts/{id}&lt;/td>
 &lt;td style="text-align: left">GET&lt;/td>
 &lt;td style="text-align: left">return a simple demo message&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">/ping&lt;/td>
 &lt;td style="text-align: left">GET&lt;/td>
 &lt;td style="text-align: left">return pong&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>我們先設置一下rate limiter桶子的容量只能放下一個tokens,而tokens則會每秒生產5個。存取API時,若沒有Token可以用，就需要等待token下一次生產並放到桶子裡，才能繼續進行下去。&lt;/strong>&lt;/p></description></item><item><title>[Note]Token Bucket algorithm introduction and play with golang rate Limiter</title><link>http://localhost:1313/post/note/token-bucket-intro/</link><pubDate>Tue, 29 Mar 2022 18:33:07 +0800</pubDate><guid>http://localhost:1313/post/note/token-bucket-intro/</guid><description>&lt;h2 id="token-bucket令牌桶算法">Token Bucket(令牌桶算法)
&lt;a class="header-anchor" href="#token-bucket%e4%bb%a4%e7%89%8c%e6%a1%b6%e7%ae%97%e6%b3%95">&lt;/a>
&lt;/h2>&lt;h4 id="什麼是token-bucket-呢">什麼是Token Bucket 呢?
&lt;a class="header-anchor" href="#%e4%bb%80%e9%ba%bc%e6%98%aftoken-bucket-%e5%91%a2">&lt;/a>
&lt;/h4>&lt;blockquote>
&lt;p>簡單來說就是運用Token Bucket的系統會以一個設定的速率往桶子(Bucket)裡面丟令牌(Token)。如果請求(Request)需要被處理時，就必需得Bucket裡的Token。當桶子裡面的沒有Token可以分配/獲取時，也就是說Bucket現在是空的(Token已經被其他令牌拿完了)，系統則會拒絕這個請求的服務。&lt;/p></description></item><item><title>[Note]What Is JWT(Json Web Token)-EN</title><link>http://localhost:1313/post/note/jwt-note/</link><pubDate>Thu, 24 Mar 2022 13:52:49 +0800</pubDate><guid>http://localhost:1313/post/note/jwt-note/</guid><description>&lt;h2 id="what-is-jwtjson-web-token">What is JWT(Json Web Token)?
&lt;a class="header-anchor" href="#what-is-jwtjson-web-token">&lt;/a>
&lt;/h2>&lt;p>The full name of JWT is Json Web Token. Acccording to the definition, JWT is a proposed Internet standard for creating data with optinal signature and/or opntional encryption whose payload holds JSON that asserts some number of clamis.&lt;br>
It&amp;rsquo;s used for &lt;em>identity authentication&lt;/em> between client and the server that allows accessing resources in the server.&lt;/p>
&lt;h2 id="the-structure-of-jwt">The Structure of JWT
&lt;a class="header-anchor" href="#the-structure-of-jwt">&lt;/a>
&lt;/h2>&lt;p>JWT consists of three parts including:&lt;/p></description></item></channel></rss>