<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Note on Jackson.tmm</title><link>https://ryantokmanmokmtm.github.io/categories/note/</link><description>Recent content in Note on Jackson.tmm</description><generator>Hugo</generator><language>zh-tw</language><lastBuildDate>Mon, 02 Dec 2024 23:31:33 +0800</lastBuildDate><atom:link href="https://ryantokmanmokmtm.github.io/categories/note/rss.xml" rel="self" type="application/rss+xml"/><item><title>[筆記] 資料庫索引(index)</title><link>https://ryantokmanmokmtm.github.io/archives/note/database-index/</link><pubDate>Mon, 02 Dec 2024 23:31:33 +0800</pubDate><guid>https://ryantokmanmokmtm.github.io/archives/note/database-index/</guid><description>&lt;h2 id="前言">前言
&lt;a class="header-anchor" href="#%e5%89%8d%e8%a8%80">&lt;/a>
&lt;/h2>&lt;p>之前的文章中，我們有簡單探討過事務相關的課題，而在這篇文章就主要討論 Index 索引相關的課題！ 而索引也跟 B+ tree 相關，如果不了解B+ tree的同學可以去參考之前討論
&lt;a href="https://ryantokmanmokmtm.github.io/post/note/balance-tree" title="平衡樹的文章" >
 平衡樹的文章
 
&lt;/a>。&lt;/p></description></item><item><title>[筆記] 淺談資料庫事務(Transcation)</title><link>https://ryantokmanmokmtm.github.io/archives/note/database-transaction/</link><pubDate>Sat, 23 Nov 2024 22:11:45 +0800</pubDate><guid>https://ryantokmanmokmtm.github.io/archives/note/database-transaction/</guid><description>&lt;h2 id="簡介">簡介
&lt;a class="header-anchor" href="#%e7%b0%a1%e4%bb%8b">&lt;/a>
&lt;/h2>&lt;p>這篇文章主要是想要討論一下資料庫筆一個重要的概念&lt;strong>事務(Transcation)&lt;/strong>。接下來的文章主要會分成一下幾個部分繼續討論：&lt;/p>
&lt;ol>
&lt;li>什麼是資料庫的事務(Transcation)&lt;/li>
&lt;li>事務(Transcation)的4大特性為何&lt;/li>
&lt;li>一致性問題和解決方法&lt;/li>
&lt;li>MVCC和鎖的簡單介紹&lt;/li>
&lt;/ol>
&lt;h2 id="什麼是事務transcation">什麼是事務(Transcation)
&lt;a class="header-anchor" href="#%e4%bb%80%e9%ba%bc%e6%98%af%e4%ba%8b%e5%8b%99transcation">&lt;/a>
&lt;/h2>&lt;p>在資料庫系統中，我們都會對數據進行讀寫操作，但是如果我們要對數據做一系列的操作(2個或以上的操作)，正在被操作的數據我們不希望能被其他人修改從而影響了結果，而且即便途中操作失敗，也希望他能回到原本的狀態。而資料庫為我們提供一個這樣的方法使得數據的操作要麼是&lt;strong>全部都成功，要麼全部都是失敗&lt;/strong>，這就是事務(Transcation)，也可以稱之為「交易」。&lt;/p></description></item><item><title>[筆記] 平衡樹 Balance Tree</title><link>https://ryantokmanmokmtm.github.io/archives/note/balance-tree/</link><pubDate>Thu, 31 Oct 2024 15:28:20 +0800</pubDate><guid>https://ryantokmanmokmtm.github.io/archives/note/balance-tree/</guid><description>&lt;h2 id="簡介">簡介
&lt;a class="header-anchor" href="#%e7%b0%a1%e4%bb%8b">&lt;/a>
&lt;/h2>&lt;p>在講述Balance Tree之前，我們先來看一種情況。現在我們根據數據來建立一棵Binary Search Tree，譬如說以下的數據 : [4,5,6,7,8,9,10], 我們就會建立出以下這顆 Binary Search Tree:&lt;br>
&lt;img src="https://ryantokmanmokmtm.github.io/imgs/img-lazy-loading.gif" data-src="https://ryantokmanmokmtm.github.io/imgs-custom/helper/balance-tree/unblanceTree.png" alt="unbalance-tree" />&lt;/p></description></item><item><title>[筆記] Binary Search 演算法</title><link>https://ryantokmanmokmtm.github.io/archives/note/note-binarysearch/</link><pubDate>Thu, 09 Mar 2023 13:48:46 +0800</pubDate><guid>https://ryantokmanmokmtm.github.io/archives/note/note-binarysearch/</guid><description>&lt;p>Binary Search 演算法是用於在一個有序array中搜尋一個值的演算法 - TC:O(log n)。相較於Linear Search(線性搜尋) - TC:O(n),其效率大大提高。&lt;/p></description></item><item><title>[筆記] KMP - Knuth-Morris-Pratt 演算法</title><link>https://ryantokmanmokmtm.github.io/archives/note/note-kmp/</link><pubDate>Mon, 06 Mar 2023 12:32:40 +0800</pubDate><guid>https://ryantokmanmokmtm.github.io/archives/note/note-kmp/</guid><description>&lt;p>KMP(Knuth-Morris-Pratt) 算法是一個用於字符串匹配的一個算法，但確實有點抽象和複雜，因此打算寫一篇筆記來紀錄一下這個算法！&lt;br>
給定一個&lt;code>text&lt;/code>以及&lt;code>pattern&lt;/code>字符串，透過KMP 算法可以在&lt;code>text&lt;/code>中是否存在&lt;code>pattern&lt;/code>這個字符串。&lt;/p></description></item><item><title>[筆記]TrieTree(前綴樹/字典樹)</title><link>https://ryantokmanmokmtm.github.io/archives/note/trietree/</link><pubDate>Tue, 21 Jun 2022 11:19:28 +0800</pubDate><guid>https://ryantokmanmokmtm.github.io/archives/note/trietree/</guid><description>&lt;h1 id="introduction">Introduction
&lt;a class="header-anchor" href="#introduction">&lt;/a>
&lt;/h1>&lt;h2 id="什麼是trietree">什麼是TrieTree?
&lt;a class="header-anchor" href="#%e4%bb%80%e9%ba%bc%e6%98%aftrietree">&lt;/a>
&lt;/h2>
 &lt;blockquote>
 &lt;p>Trie稱為前綴樹或字典樹,是有序樹的一種,Node的key通常為String類型。Trie Tree與Binary-Searching Tree不同的點是,Trie Tree的Key並不會直接保存在Node中,而是它在Tree中的位置所決定的。一個Node中的所有的childrens都有相同的Prefix(前綴)。假設有個Node的key 為&lt;code>T&lt;/code>,它的children將會是&lt;code>Time&lt;/code>, &lt;code>Tim&lt;/code>, &lt;code>Test&lt;/code>等,因為他們都會相同的Prefix(前綴)&lt;code>T&lt;/code>。&lt;/p></description></item><item><title>[筆記]Palindromic String(迴文字串)</title><link>https://ryantokmanmokmtm.github.io/archives/note/palindromicstring/</link><pubDate>Thu, 16 Jun 2022 12:26:03 +0800</pubDate><guid>https://ryantokmanmokmtm.github.io/archives/note/palindromicstring/</guid><description>&lt;h1 id="introduction">Introduction
&lt;a class="header-anchor" href="#introduction">&lt;/a>
&lt;/h1>&lt;h2 id="什麼是palindromic-string-迴文字串">什麼是Palindromic String 迴文字串
&lt;a class="header-anchor" href="#%e4%bb%80%e9%ba%bc%e6%98%afpalindromic-string-%e8%bf%b4%e6%96%87%e5%ad%97%e4%b8%b2">&lt;/a>
&lt;/h2>&lt;p>所謂的Palindromic String(迴文字串) 就是以一個字元為中間，而它的左邊以及右邊的組成字元相同。&lt;br>
例子:&lt;br>
&lt;code>abcdcba&lt;/code> 以&lt;code>d&lt;/code>為中心的左跟右的字元一樣。&lt;br>
&lt;code>cdc&lt;/code>左跟右都為&lt;code>c&lt;/code>&lt;br>
&lt;code>bcdcb&lt;/code> 左跟右都為&lt;code>b&lt;/code>&lt;br>
&lt;code>abcdcba&lt;/code> 左跟右都為&lt;code>a&lt;/code>&lt;/p></description></item><item><title>[Note]Simple RateLimiter Example Based on IP</title><link>https://ryantokmanmokmtm.github.io/archives/note/simple-ratelimiter-example-based-on-ip/</link><pubDate>Wed, 30 Mar 2022 16:05:57 +0800</pubDate><guid>https://ryantokmanmokmtm.github.io/archives/note/simple-ratelimiter-example-based-on-ip/</guid><description>&lt;h3 id="基於gin實作rate-limiter">基於Gin實作Rate Limiter
&lt;a class="header-anchor" href="#%e5%9f%ba%e6%96%bcgin%e5%af%a6%e4%bd%9crate-limiter">&lt;/a>
&lt;/h3>&lt;p>假設我們有2個APIs,而每個API都需要消耗1個&lt;code>Tokens&lt;/code>&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>uri&lt;/th>
 &lt;th>method&lt;/th>
 &lt;th>desc&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>/api/posts/{id}&lt;/td>
 &lt;td>GET&lt;/td>
 &lt;td>return a simple demo message&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>/ping&lt;/td>
 &lt;td>GET&lt;/td>
 &lt;td>return pong&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>我們先設置一下rate limiter桶子的容量只能放下一個tokens,而tokens則會每秒生產5個。存取API時,若沒有Token可以用，就需要等待token下一次生產並放到桶子裡，才能繼續進行下去。&lt;/strong>&lt;/p></description></item><item><title>[Note]Token Bucket algorithm introduction and play with golang rate Limiter</title><link>https://ryantokmanmokmtm.github.io/archives/note/token-bucket-intro/</link><pubDate>Tue, 29 Mar 2022 18:33:07 +0800</pubDate><guid>https://ryantokmanmokmtm.github.io/archives/note/token-bucket-intro/</guid><description>&lt;h2 id="token-bucket令牌桶算法">Token Bucket(令牌桶算法)
&lt;a class="header-anchor" href="#token-bucket%e4%bb%a4%e7%89%8c%e6%a1%b6%e7%ae%97%e6%b3%95">&lt;/a>
&lt;/h2>&lt;h4 id="什麼是token-bucket-呢">什麼是Token Bucket 呢?
&lt;a class="header-anchor" href="#%e4%bb%80%e9%ba%bc%e6%98%aftoken-bucket-%e5%91%a2">&lt;/a>
&lt;/h4>
 &lt;blockquote>
 &lt;p>簡單來說就是運用Token Bucket的系統會以一個設定的速率往桶子(Bucket)裡面丟令牌(Token)。如果請求(Request)需要被處理時，就必需得Bucket裡的Token。當桶子裡面的沒有Token可以分配/獲取時，也就是說Bucket現在是空的(Token已經被其他令牌拿完了)，系統則會拒絕這個請求的服務。&lt;/p></description></item><item><title>[Note]What Is JWT(Json Web Token)-EN</title><link>https://ryantokmanmokmtm.github.io/archives/note/jwt-note/</link><pubDate>Thu, 24 Mar 2022 13:52:49 +0800</pubDate><guid>https://ryantokmanmokmtm.github.io/archives/note/jwt-note/</guid><description>&lt;h2 id="what-is-jwtjson-web-token">What is JWT(Json Web Token)?
&lt;a class="header-anchor" href="#what-is-jwtjson-web-token">&lt;/a>
&lt;/h2>&lt;p>The full name of JWT is Json Web Token. Acccording to the definition, JWT is a proposed Internet standard for creating data with optinal signature and/or opntional encryption whose payload holds JSON that asserts some number of clamis.&lt;br>
It&amp;rsquo;s used for &lt;em>identity authentication&lt;/em> between client and the server that allows accessing resources in the server.&lt;/p>
&lt;h2 id="the-structure-of-jwt">The Structure of JWT
&lt;a class="header-anchor" href="#the-structure-of-jwt">&lt;/a>
&lt;/h2>&lt;p>JWT consists of three parts including:&lt;/p></description></item></channel></rss>